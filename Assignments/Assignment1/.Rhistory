# load file
load(file="assign1.RData")
getwd()
setwd('/Users/nizar/Desktop/Courses/Sem2/ExperimentalDesign/Assignments/ExperimentalDesign/Assignments/Assignment1')
# set up parameters
m=30
n=30
mu=180
nu=175
sd=10
# load file
load(file="assign1.RData")
# set up parameters
m=30
n=30
mu=180
nu=175
sd=10
# generate two random normal distributions samples of size 30
x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
t.test(x,y,var.equal=TRUE)
t.test(x,y,var.equal=TRUE)[[3]]
B=1000
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
power=mean(p<0.05)
power
n=35
mu=180
nu=175
sd=10
# generate two random normal distributions samples of size 30
x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
t.test(x,y,var.equal=TRUE)
t.test(x,y,var.equal=TRUE)[[3]]
B=1000
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
power=mean(p<0.05)
hist(p)
hist(p, prob=TRUE)
p
p<0.05
count(p<0.05)
mu = nu = 180
sum(p<.05)
hist(data)
# load file
data=load(file="assign1.RData")
hist(data)
# load file
load(file="assign1.RData")
hist(x1)
hist(x2)
hist(x3)
hist(x4)
hist(x5)
# make a qqplot of all five data vectors
qqnorm(x1)
qqnorm(x2)
qqnorm(x3) #
qqnorm(x4)
qqnorm(x4) # yes
qqnorm(x5)
# make a histogram of all five data vectors
hist(x1)
# make a histogram of all five data vectors
hist(x1)
hist(x2)
hist(x3)
hist(x4)
hist(x5)
hist(x4)
p=numeric(B)
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
# how many p-values are smaller than .05?
sum(p<.05)
# how many p-values are smaller than .1?
sum(p<.1)
sd = 1
# compute p-value B times and store in p
B=1000
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
# how many p-values are smaller than .05?
sum(p<.05)
# how many p-values are smaller than .1?
sum(p<.1)
# make a histogram of the distribution
hist(p)
# set parameters
mu = nu = 180
m = n = 30
sd = 10
# compute p-value B times and store in p
B=1000
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
# how many p-values are smaller than .05?
sum(p<.05)
# how many p-values are smaller than .1?
sum(p<.1)
# make a histogram of the distribution
hist(p)
# make a histogram of the distribution
hist(p, prob=TRUE)
# set parameters
mu = nu = 180
m = n = 30
sd = 1
# compute p-value B times and store in p
B=1000
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
# how many p-values are smaller than .05?
sum(p<.05)
# how many p-values are smaller than .1?
sum(p<.1)
# make a histogram of the distribution
hist(p)
sd = 6
# compute p-value B times and store in p
B=1000
# set parameters
mu = 180
nu = 175
m = n = 30
sd = 6
# compute p-value B times and store in p
B=1000
p=numeric(B)
for (b in 1:B) {x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
p[b]=t.test(x,y,var.equal=TRUE)[[3]]}
# how many p-values are smaller than .05?
sum(p<.05)
# how many p-values are smaller than .1?
sum(p<.1)
# make a histogram of the distribution
hist(p)
# set up parameters
m=30
n=35
mu=180
nu=175
sd=10
# generate two random normal distributions samples
x=rnorm(m,mu,sd)
y=rnorm(n,nu,sd)
# run the t-test and extract the p-value
t.test(x,y,var.equal=TRUE)
t.test(x,y,var.equal=TRUE)[[3]]
# number of p-values smaller than .05
power=mean(p<0.05)
# how many p-values are smaller than .05
sum(p<.05)
# generate histogram of p-distribution
plot(nu, power)
